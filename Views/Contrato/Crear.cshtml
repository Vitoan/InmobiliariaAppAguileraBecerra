@model InmobiliariaAppAguileraBecerra.Models.Contrato

@{
    ViewData["Title"] = "Crear Contrato";
}

<h1 class="mb-4 text-primary">
    <i class="bi bi-file-earmark-text-fill"></i> @ViewData["Title"]
</h1>
<hr />
<!-- Bloque de mensajes de error -->
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill"></i>
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="shadow-sm p-4 rounded bg-light">
    <form asp-action="Crear">
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        <div class="mb-3">
            <label asp-for="InquilinoId" class="form-label"></label>
            <select asp-for="InquilinoId" class="form-select" asp-items="ViewBag.Inquilinos"></select>
            <span asp-validation-for="InquilinoId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="InmuebleId" class="form-label"></label>
            <select asp-for="InmuebleId" class="form-select" asp-items="ViewBag.Inmuebles"></select>
            <span asp-validation-for="InmuebleId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="FechaInicio" class="form-label"></label>
            <input asp-for="FechaInicio" class="form-control" />
            <span asp-validation-for="FechaInicio" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="FechaFin" class="form-label"></label>
            <input asp-for="FechaFin" class="form-control" />
            <span asp-validation-for="FechaFin" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Monto" class="form-label"></label>
            <input asp-for="Monto" class="form-control" />
            <span asp-validation-for="Monto" class="text-danger"></span>
        </div>

        <div class="mt-3">
            <input type="submit" value="Crear" class="btn btn-primary" />
            <a asp-action="Index" class="btn btn-secondary">Volver</a>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        (function () {
            // Localizamos el form (si hay más de uno, adaptá el selector)
            const form = document.querySelector("form[asp-action='Crear'], form[asp-action='Editar']") || document.querySelector("form");
            if (!form) return;

            // Creamos el div de alerta (invisible inicialmente)
            const alertDiv = document.createElement("div");
            alertDiv.className = "alert alert-danger d-none mt-3";
            alertDiv.role = "alert";

            // Insertamos el alert arriba del formulario (o donde prefieras)
            form.parentNode.insertBefore(alertDiv, form);

            // Helpers para obtener elementos (compatible con los ids generados por TagHelpers)
            function getValueByIdOrName(name) {
                // intenta por id
                let el = document.getElementById(name);
                if (el) return el.value;
                // luego por name
                el = form.querySelector(`[name='${name}']`);
                return el ? el.value : null;
            }

            form.addEventListener("submit", async function (e) {
                // Oculta alert previo
                alertDiv.classList.add("d-none");
                alertDiv.textContent = "";

                // Obtener valores del formulario
                const inmuebleId = getValueByIdOrName("InmuebleId");
                const fechaInicio = getValueByIdOrName("FechaInicio");
                const fechaFin = getValueByIdOrName("FechaFin");
                const id = getValueByIdOrName("Id") || 0; // en Crear puede ser null/undefined

                // Validación básica cliente: campos presentes
                if (!inmuebleId || !fechaInicio || !fechaFin) {
                    // dejamos que el validador de modelo muestre errores; no interferimos
                    return;
                }

                // Validación local: fechaFin > fechaInicio
                const inicioDate = new Date(fechaInicio);
                const finDate = new Date(fechaFin);
                if (finDate <= inicioDate) {
                    e.preventDefault();
                    alertDiv.textContent = "La fecha de fin debe ser posterior a la fecha de inicio.";
                    alertDiv.classList.remove("d-none");
                    return;
                }

                // Preparar parámetros (encode)
                const params = new URLSearchParams({
                    inmuebleId: inmuebleId,
                    fechaInicio: fechaInicio, // formato yyyy-MM-dd proporcionado por input[type=date]
                    fechaFin: fechaFin,
                    id: id
                });

                // Llamada AJAX al servidor
                try {
                    const url = "/Contrato/VerificarSuperposicion?" + params.toString();
                    const resp = await fetch(url, { method: "GET", credentials: "same-origin" });
                    if (!resp.ok) {
                        // en caso de error de red/servidor: no bloqueamos el envío
                        console.error("Error al verificar superposición:", resp.statusText);
                        return;
                    }
                    const data = await resp.json();
                    if (data.existe) {
                        e.preventDefault();
                        alertDiv.textContent = "Ya existe un contrato vigente para este inmueble en las fechas seleccionadas.";
                        alertDiv.classList.remove("d-none");
                        return;
                    }
                    // Si no hay superposición, permitimos el envío (no hacemos nada)
                } catch (err) {
                    // Si falla el fetch, permitimos enviar para que el backend valide y devuelva el error
                    console.error("Excepción verificando superposición:", err);
                }
            });
        })();
    </script>
}

